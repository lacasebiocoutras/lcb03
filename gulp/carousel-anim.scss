/**
 * from Carousel.sass
 * @author: Dang Van Thanh
 * @github: https://github.com/dangvanthanh/carousel.sass
 * @description: A Simple Carousel Pure CSS Using Sass
 * @version: 1.0.0
 */
 /**
  * https://github.com/csswizardry/csswizardry.github.com/blob/master/css/_components.carousel.scss
  */


.containerCarouselAnim {
  width: 100%;
  min-width: 300px;
  height: auto;
  margin: auto;
  border: 5px solid #fff;
}


%animation-anim-default {
  opacity: 1 !important;
  z-index: 3 !important;
}

@mixin carouselAnim($items, $animationSlidy, $animation: 'default') {

.containerCarouselAnim {

  &:hover {
      border: 5px solid red;


  }
  //&:not(:hover) .carousel {
  .carousel {
    border: 5px solid blue;
    width: 100%;
    position: relative;
    overflow: hidden;
    // text-align: center;




    > input[type="radio"] {
      position: absolute;
      left: 0;
      opacity: 0;
      top: 0;


      // &:checked {
      //   ~ .carousel__items .carousel__item,
      //   ~ .carousel__prev > label,
      //   ~ .carousel__next > label {
      //     opacity: 0;
      //     visibility: visible !important;
      //   }
      // }

      // &:hover {
      //   ~ .carousel__items {
      //     border: 5px solid #0ff;
      //   }

      //   ~ .carousel__items .carousel__item {
      //     border: 5px solid #f0f;
      //   }

      // }

      // &:active {
      //   ~ .carousel__nav > label {
      //     background-color: red;
      //   }
      // }
      // &:not(:active) {
      //   ~ .carousel__nav > label {
      //     background-color: blue;
      //   }
      // }

      // @for $i from 1 through $items {

      //   &:nth-child(#{$i}) {
      //     &:checked {
      //       ~ .carousel__items .carousel__item {
      //         @if $animation == 'default' {
      //           &:nth-child(#{$i}) {
      //             opacity: 1;
      //           }
      //         }
      //       }



      //       ~ .carousel__nav {
      //         > label {
      //           &:nth-child(#{$i}) {
      //             background: #ccc;
      //             cursor: default;
      //             pointer-events: none;
      //           }
      //         }
      //       }
      //     }
      //   }
      // }

    }

    @for $i from 1 through $items {

    }

    &__items {
      overflow: hidden;
      margin: 0;
      padding: 0;
      list-style-type: none;
      width: 500%;
      height: auto; // 600px;
      position: relative;
      border: 5px solid #fff;

      display: table;
      animation: 10s #{$animationSlidy} alternate infinite;
    }

    &__item {
      // position: absolute;
      // top: 0;
      // left: 0;
      // width: 80%;
      // height: 100%;
      // z-index: -1;
      // transition: opacity 2s;
      // -webkit-transition: opacity 2s;
      // border: 5px solid #ff0;

      // position: relative;
      // width: 100%;
      // margin: 0;
      // left: 0;
      // text-align: left;
      // font-size: 0;
      position: relative;
      display: table-cell;
      // vertical-align: middle;
      top:0;
      width: 20%; /* 100 / number of panes */

      img {
        // width: 80%;
        // vertical-align: middle;
        width: 100%; float: left;
      }
    }

    &__items:hover {
      animation-play-state: paused;
    }





    &__nav {
      position: absolute;
      bottom: 3%;
      left: 0;
      text-align: center;
      width: 100%;
      z-index: 3;

      > label {
        border: 1px solid #fff;
        display: inline-block;
        border-radius: 50%;
        cursor: pointer;
        margin: 0 .125%;
        width: 20px;
        height: 20px;
      }
    }



  } // / &:not(:hover) .carousel



//   &:hover .carousel {
//     width: 100%;
//     position: relative;
//     overflow: hidden;


//     > input[type="radio"] {
//       position: absolute;
//       left: 0;
//       opacity: 0;
//       top: 0;


//       &:checked {
//         ~ .carousel__items .carousel__item,
//         ~ .carousel__prev > label,
//         ~ .carousel__next > label {
//           opacity: 0;
//           visibility: visible !important;
//         }
//       }

//       &:hover {
//         ~ .carousel__items {
//           border: 5px solid #0ff;
//         }

//         ~ .carousel__items .carousel__item {
//           border: 5px solid #f0f;
//         }

//       }

//       // &:active {
//       //   ~ .carousel__nav > label {
//       //     background-color: red;
//       //   }
//       // }
//       // &:not(:active) {
//       //   ~ .carousel__nav > label {
//       //     background-color: blue;
//       //   }
//       // }
// //cas 5
// // .carousel > input[type="radio"]:nth-child(1):checked ~ .carousel__prev > label:nth-child(5),
// // .carousel > input[type="radio"]:nth-child(5):checked ~ .carousel__next > label:nth-child(1) {

//       @for $i from 1 through $items {

//         &:nth-child(#{$i}) {
//           &:checked {
//             ~ .carousel__items .carousel__item {
//               @if $animation == 'default' {
//                 &:nth-child(#{$i}) {
//                   opacity: 1;
//                 }
//               }
//             }

//             ~ .carousel__prev {
//               > label {

//                 @if $i == 1 {
//                   &:nth-child(#{$items}) {
//                     @extend %animation-anim-default;
//                   }
//                 } @else if $i == $items {
//                   &:nth-child(#{$items - 1}) {
//                     @extend %animation-anim-default;
//                   }
//                 } @else {
//                   &:nth-child(#{$i - 1}) {
//                     @extend %animation-anim-default;
//                   }
//                 }
//               }
//             }

//             ~ .carousel__next {
//               > label {
//                 @if $i == $items {
//                   &:nth-child(1) {
//                     @extend %animation-anim-default;
//                   }
//                 } @else {
//                   &:nth-child(#{$i + 1}) {
//                     @extend %animation-anim-default;
//                   }
//                 }
//               }
//             }

//             ~ .carousel__nav {
//               > label {
//                 &:nth-child(#{$i}) {
//                   background: #ccc;
//                   cursor: default;
//                   pointer-events: none;
//                 }
//               }
//             }
//           }
//         }
//       }

//     }

//     &__items {
//       margin: 0;
//       padding: 0;
//       list-style-type: none;
//       width: 100%;
//       height: 600px;
//       position: relative;
//       border: 5px solid #fff;
//     }

//     &__item {
//       position: absolute;
//       top: 0;
//       left: 0;
//       width: 100%;
//       height: 100%;
//       z-index: -1;
//       transition: opacity 2s;
//       -webkit-transition: opacity 2s;
//       border: 5px solid #ff0;

//       img {
//         width: 100%;
//         vertical-align: middle;
//       }
//     }

//     &__prev,
//     &__next {
//       > label {
//         border: 1px solid #fff;
//         border-radius: 50%;
//         cursor: pointer;
//         display: block;
//         width: 40px;
//         height: 40px;
//         position: absolute;
//         top: 50%;
//         // transform: translateY(-50%);
//         // -webkit-transform: translateY(-50%);
//         // transition: all .3s ease;
//         // -webkit-transition: all .3s ease;
//         opacity: 0;
//         z-index: 2;

//         &:hover,
//         &:focus {
//           opacity: .5 !important;
//         }

//         &:before,
//         &:after {
//           content: "";
//           position: absolute;
//           width: inherit;
//           height: inherit;
//         }

//         &:before {
//           background: linear-gradient(to top, #fff 0%, #fff 10%, rgba(51, 51, 51, 0) 10%),
//                       linear-gradient(to left, #fff 0%, #fff 10%, rgba(51, 51, 51, 0) 10%);
//           width: 60%;
//           height: 60%;
//           top: 20%;
//         }
//       }
//     }

//     &__prev {
//       > label {
//         left: 2%;

//         &:before {
//           left: 35%;
//           top: 20%;
//           transform: rotate(135deg);
//           -webkit-transform: rotate(135deg);
//         }
//       }
//     }

//     &__next {
//       > label {
//         right: 2%;

//         &:before {
//           left: 10%;
//           transform: rotate(315deg);
//           -webkit-transform: rotate(315deg);
//         }
//       }
//     }

//     &__nav {
//       position: absolute;
//       bottom: 3%;
//       left: 0;
//       text-align: center;
//       width: 100%;
//       z-index: 3;

//       > label {
//         border: 1px solid #fff;
//         display: inline-block;
//         border-radius: 50%;
//         cursor: pointer;
//         margin: 0 .125%;
//         width: 20px;
//         height: 20px;
//       }
//     }
//   } // / &:hover .carousel
}
}


// extra
@mixin carouselAnim_extra($items, $id) {

.containerCarouselAnim {
  .carousel-#{$id} {

    > input[type="radio"] {

      @for $i from 1 through $items {
        @if ($i == 1 or $i== $items) {

          &:nth-child(#{$i}) {
            &:checked {

              ~ .carousel__prev {
                > label {

                  @if $i == 1 {
                    &:nth-child(#{$items}) {
                      @extend %animation-default;
                    }
                  } @else if $i == $items {
                    &:nth-child(#{$items - 1}) {
                      @extend %animation-default;
                    }
                  } @else {
                    &:nth-child(#{$i - 1}) {
                      @extend %animation-default;
                    }
                  }
                }
              }

              ~ .carousel__next {
                > label {
                  @if $i == $items {
                    &:nth-child(1) {
                      @extend %animation-default;
                    }
                  } @else {
                    &:nth-child(#{$i + 1}) {
                      @extend %animation-default;
                    }
                  }
                }
              }
            }
          }
        }
      }

    }
  }
}
}







/**
 * Generate the carousel animation
 * based on the number of frames
 * and the pourcentage of a frame spent static
 *
 * @param {Number} $n - number of frames
 * @param {Number} $x - percentage of the animation spent static per frame
 * @param {String} $animation-name ('carousel') - animation name
 */
// @keyframes carouselAnim {
//   0%, 17.5% {
//     transform: translateX(0%);
//     filter: blur(0);
//   }
//   19.0625% {
//     filter: blur(2px);
//   }
//   20.625%, 38.125% {
//     transform: translateX(-20%);
//     filter: blur(0);
//   }
//   39.6875% {
//     filter: blur(2px);
//   }
//   41.25%, 58.75% {
//     transform: translateX(-40%);
//     filter: blur(0);
//   }
//   60.3125% {
//     filter: blur(2px);
//   }
//   61.875%, 79.375% {
//     transform: translateX(-60%);
//     filter: blur(0);
//   }
//   80.9375% {
//     filter: blur(2px);
//   }
//   82.5%, 100% {
//     transform: translateX(-80%);
//     filter: blur(0);
//   }
// }


// ----
// Sass (v3.4.0.rc.1)
// Compass (v1.0.0.alpha.20)
// ----

/**
 * Generate the carousel animation
 * based on the number of frames
 * and the pourcentage of a frame spent static
 *
 * @param {Number} $n - number of frames
 * @param {Number} $x - percentage of the animation spent static per frame
 * @param {String} $animation-name ('carousel') - animation name
 */

@mixin carouselAnimKeyfr($frames, $static, $animation-name: 'carouselAnim') {
  // Make `$static` a percentage in case it's unitless
  @if unitless($static) {
    $static: percentage($static);
  }

  // Compute the percentage of animation spent animating for each frame
  $animating: (100% - $frames * $static) / ($frames - 1);

  // Output the animation at root level
  // to make sure it doesn't crash if called in a selector
  .carouselAnim {

    // Create an animation
    @keyframes #{$animation-name} {

      // Loop over the frames
      @for $i from 0 to $frames {
        // Compute keyframes
        $current-frame: $i * $static + $i * $animating;
        $next-frame: ($i + 1) * $static + $i * $animating;
        $halfway-frame: $i * $static / 1% + ($i - 1) * $animating + $animating / 2;

        // Output halfway styles for blur
        // Avoid a negative keyframes by making sure `$i` is at least `1`
        @if $i > 0 {
          #{$halfway-frame} {
            filter: blur(2px);
          }
        }

        // Output styles for each frame
        #{$current-frame, $next-frame} {
          transform: translateX($i * -100% / $frames);
          filter: blur(0);
        }
      }
    }
  }
}
// Generate animation
// @include carousel-animation(5, 17.5%);




